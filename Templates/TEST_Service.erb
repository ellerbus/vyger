<%- . ($config.Templates + "/_Utilities.ps1") -%>
<%- $config.OutFile = "Common/Services/$($service)Tests.cs" -%>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using FluentAssertions;
using FluentValidation;
using FluentValidation.Results;
using Moq;
using <%= $common_ns %>;
using <%= $common_ns %>.Models;
using <%= $common_ns %>.Repositories;
using <%= $common_ns %>.Services;

namespace <%= $config.Namespace %>.Common.Services
{
    [TestClass]
    public class <%= $service %>Tests : BaseServiceTests<<%= $service %>>
    {
        #region Helpers/Test Initializers

        [TestInitialize]
        public override void TestInitialize()
        {
            base.TestInitialize();
        }

        #endregion

        #region Tests - Get

        [TestMethod]
        public void <%= $service %>_Get<%= $class_names %>_Should_CallIntoContext()
        {
            //	arrange
            var <%= $var_names %> = Design.Many<<%= $class_name %>>().Build();

            Moxy.GetMock<IVygerContext>()
                .Setup(x => x.<%= $class_name %>s)
                .Returns(<%= $var_names %>);

            //	act
            var actual = SubjectUnderTest.Get<%= $class_name %>();

            //	assert
            actual.Count.Should().Be(<%= $var_names %>.Count);

            Moxy.VerifyAll();
        }

        [TestMethod]
        public void <%= $service %>_Get<%= $class_name %>ByPrimaryKey_Should_CallIntoContext()
        {
            //	arrange
            var request = SecurityAccess.None;

            var <%= $var_names %> = Design.Many<<%= $class_name %>>().Build();

            var <%= $var_name %> = <%= $var_names %>.Last();

            Moxy.GetMock<IVygerContext>()
                .Setup(x => x.<%= $class_name %>s)
                .Returns(<%= $var_names %>);

            Moxy.GetMock<ISecurityActor>()
                .Setup(x => x.VerifyCan(SecurityAccess.None, <%= $var_name %>));

            //	act
            var actual = SubjectUnderTest.Get<%= $class_name %>(pk, request);

            //	assert
            actual.Should().BeSameAs(<%= $var_name %>);

            Moxy.VerifyAll();
        }

        #endregion
        
        #region Tests - Save

        [TestMethod]
        public void <%= $service %>_SaveChange_Should_CallContext()
        {
            //	arrange
            Moxy.GetMock<IVygerContext>()
                .Setup(x => x.SaveChanges())
                .Returns(1);

            //	act
            var actual = SubjectUnderTest.SaveChanges();

            //	assert
            actual.Should().Be(1);

            Moxy.VerifyAll();
        }

        #endregion
    }
}