<%- . ($config.Templates + "/_Utilities.ps1") -%>
<%- $config.OutFile = "Models/$class_name.cs" -%>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics;
using Augment;

namespace <%= $config.Namespace %>.Models
{
    ///	<summary>
    ///
    ///	</summary>
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    public partial class <%= $class_name %>
    {
        #region Constructors

        public <%= $class_name %>() : base() { }
        
        #endregion

        #region ToString/DebuggerDisplay

        public override string ToString()
        {
            return DebuggerDisplay;
        }

        ///	<summary>
        ///	DebuggerDisplay for this object
        ///	</summary>
        private string DebuggerDisplay
        {
            get
            {
                string pk = $"[{<%= $primary_keys | ForEach-Object { $_.Name | Pascal } | Combine -Sep "}, {" %>}]";
                
                string uq = $"[{<%= $unique_keys | ForEach-Object { $_.Name | Pascal } | Combine -Sep "}, {" %>}]";
                
                return "{0}, pk={1}, uq={2}".FormatArgs("<%= $class_name %>", pk, uq);
            }
        }

        #endregion

        #region Methods

		/// <summary>
		///	Overlay all properties (except primary key, audits)
		/// </summary>
		public void OverlayWith(<%= $class_name %> other)
		{
			<%- foreach ($c in $columns) { -%>
			<%- if (-not $c.IsPrimaryKey) { -%>
			<%= $c.Name | Pascal %> = other.<%= $c.Name | Pascal %>;
			<%- } -%>
			<%- } -%>
		}
        
        #endregion

        #region Properties
        <%- foreach ($column in $columns) { -%>

        ///	<summary>
        ///	Gets / Sets database column '<%= $column.Name %>'
        ///	</summary>
		<%- if (-not $column.Nullable) { -%>
		[Required]
		<%- } -%>
		[DisplayName("<%= $column.Name | Label %>")]
        public override <%= $column | CsType %> <%= $column.Name | Pascal %> { get; set; }
        <%- } -%>

        /// <summary>
        /// 
        /// </summary>
		[NotMapped]
        public StatusTypes Status
        {
            get { return StatusEnum.ToEnum<StatusTypes>(); }
            set { StatusEnum = value.ToString(); }
        }

        public override string StatusEnum
        {
            get { return base.StatusEnum.AssertNotNull(StatusTypes.None.ToString()); }
            set { base.StatusEnum = value; }
        }

        public override DateTime CreatedAt
        {
            get { return base.CreatedAt.EnsureUtc(); }
            set { base.CreatedAt = value.EnsureUtc(); }
        }

        public override DateTime? UpdatedAt
        {
            get { return base.UpdatedAt.EnsureUtc(); }
            set { base.UpdatedAt = value.EnsureUtc(); }
        }

        #endregion

        #region Foreign Key Properties
        
        <%- foreach ($fk in $foreign_keys) { -%>
        ///	<summary>
        ///	Gets / Sets the foreign key to '<%= $fk.Name %>'
        ///	</summary>
		[ForeignKey(nameof(<%= $fk.Name | Pascal %>))]
        public <%= ($fk.Name | Pascal) -replace 'Id$', '' %> <%= ($fk.Name | Pascal) -replace 'Id$', '' %> { get; set; }
        
        <%- } -%>
        #endregion
    }
}