@model WorkoutLogDetailViewModel

@using (Html.BeginForm())
{
  @Html.AntiForgeryToken()
  @Html.ValidationSummary()
  <div class="form-group">
    <h3>
      @if (Model.CanChangeDate)
      {
        <span class="btn-group float-right">
          <a class="btn btn-outline-secondary"
             href="@Url.Action("Plans", Model.GetPlanRouteValues(Model.LogDate.AddDays(-1)))">
            <i class="fa fa-chevron-left"></i>
          </a>
          <a class="btn btn-outline-secondary"
             href="@Url.Action("Plans", Model.GetPlanRouteValues(Model.LogDate.AddDays(1)))">
            <i class="fa fa-chevron-right"></i>
          </a>
        </span>
      }
      @Model.LogDate.ToString("dddd - MMM d")
    </h3>
  </div>
  if (Model.Logs.Count() > 0)
  {
    foreach (var log in Model.Logs.OrderBy(x => x.SequenceNumber).ThenBy(x => x.Exercise.Name))
    {
      using (Html.BeginFieldScope(log, "Logs"))
      {
        <div class="form-group">
          <label>
            @Html.HiddenFor(m => log.PlanId)
            @Html.HiddenFor(m => log.CycleId)
            @Html.HiddenFor(m => log.WeekId)
            @Html.HiddenFor(m => log.DayId)
            @Html.HiddenFor(m => log.ExerciseId)
            @Html.HiddenFor(m => log.SequenceNumber)
            @log.Exercise.Category @log.Exercise.Name
          </label>
          @Html.TextBoxFor(m => log.Workout, new { @class = "form-control workout-pattern" })
          @Html.ValidationMessageFor(m => log.Workout, "", new { @class = "form-text text-danger" })
        </div>
      }
    }
  }
  <div class="form-group">
    <button type="submit" class="btn btn-primary">save workout</button>
    <a href="@Url.Action("Index")" class="btn btn-outline-secondary">cancel</a>
    @if (!Model.CanChangeDate)
    {
      <a href="@Url.Action("Create", new { date = Model.LogDate.ToYMD() })"
         class="btn btn-sm btn-outline-success float-right">
        <i class="fa fa-fw fa-plus"></i> Add Exercise
      </a>
    }
  </div>
}